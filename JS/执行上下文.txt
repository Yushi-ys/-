JavaScript 中有三种执行上下文类型:全局执行上下文、函数执行上下文、eval

全局执行上下文:这是默认的或者说是基础的上下文，任何不在函数内部的代码都在全局上下文中，它会执行两件事:创建一个全局的window对象，设置this的值等于这个全局对象，一个程序中只会有一个全局执行上下文;

函数执行上下文:一个函数被调用时，会为该函数创建一个新的上下文，每个函数都有它自己的执行上下文，函数上下文可以有任意多个;


由于JS是单线程的，每次只能做一件事情，其他的事情会放在指定的上下文栈中排队等待执行。JS解释器在初始化代码的时候，首先会创建一个新的全局执行上下文到执行上下文栈顶中，然后随着每次函数的调用都会创建一个新的执行上下文放入到栈顶中，随着函数执行完毕后被执行上下文栈顶弹出，最后只剩下全局的执行上下文

function getName() {
    const year = getYear();

    const name = 'Lynn';
    console.log(`${name} ${year} years old this year`);
}

function getYear() {
    return 18;
}
getName(); 

1、首先创建了全局执行上下文，当前全局执行上下文处于活跃状态
2、全局代码中有2个函数 getName 和 getYear，然后调用 getName 函数，JS引擎停止执行全局执行上下文，创建了新的函数执行上下文，且把该函数上下文放入执行上下文栈顶
3、getName 函数里又调用了 getYear 函数，此时暂停了 getName 的执行上下文，创建了 getYear 函数的新执行上下文，且把该函数执行上下文放入执行上下文栈顶
4、当 getYear 函数执行完后，其执行上下文从栈顶出栈，回到了 getName 执行上下文中继续执行
5、当 getName 执行完后，其执行上下文从栈顶出栈，回到了全局执行上下文中