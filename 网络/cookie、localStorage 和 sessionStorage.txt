1. cookie(大小 约4kb)
是为了应对http的无状态的情况产生的，其实就是一种存储机制
当我们第一次请求网页内容的时候是没有任何的cookie，服务端在收到请求之后，会在HTTP响应头里添加头部 Set-Cookie，并且设置标识，格式是key=value，随着响应报文一同发给服务端
浏览器收到响应报文，看到里面有 Set-Cookie，知道这是服务端给的身份标识，于是就保存起来，下次再请求的时候就自动把这个值放进 Cookie 字段里发给服务器（参与服务器之间的通信）
之后服务端可以拿出 Cookie 里的值，识别出用户的身份，然后可以给不同用户匹配不同的内容（最基本的一个用途就是身份识别）

服务端在发送Cookie之前，是会对含有sessionId的Cookie进行签名，这样即使有人篡改了sessionId，sessionId就会变成服务端识别不了的字符串 

cookie中常见的：
    name，Cookie的名称
    sessionId，用来判断是同一次会话
    Max-age，Expire，过期时间
    Domin、Path，Cookie 所属的域名和路径
    version，cookie的版本
    HttpOnly，防止XSS，因为禁用了 document.cooki
    SameSite，可以防范CSRF攻击，设置成SameSite=Strict可以严格限定 Cookie 不能随着跳转链接跨站发送
    Secure，表示这个 Cookie 仅能用 HTTPS 协议加密传输，明文的 HTTP 协议会禁止发送

常问：cookie是否可以跨域
不可以，但是可以解决
    1. 设置Cookie的domain
    2. 将Token保存在SessionStroage中（不依赖Cookie就没有跨域的问题了）此后请求都把这个Token带上


2. localstorage(10MB)
存储在浏览器中，是永久保存的，除非手动清除
不参与服务器之前的通信

3. sessionstorage(5MB)
存储在浏览器中，关闭窗口就会被删除
不参与服务器之前的通信
